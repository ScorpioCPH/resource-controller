/*
Copyright 2017 The Caicloud sample-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/resource-controller/pkg/apis/resourceclass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceClassLister helps list ResourceClasses.
type ResourceClassLister interface {
	// List lists all ResourceClasses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceClass, err error)
	// ResourceClasses returns an object that can list and get ResourceClasses.
	ResourceClasses(namespace string) ResourceClassNamespaceLister
	ResourceClassListerExpansion
}

// resourceClassLister implements the ResourceClassLister interface.
type resourceClassLister struct {
	indexer cache.Indexer
}

// NewResourceClassLister returns a new ResourceClassLister.
func NewResourceClassLister(indexer cache.Indexer) ResourceClassLister {
	return &resourceClassLister{indexer: indexer}
}

// List lists all ResourceClasses in the indexer.
func (s *resourceClassLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceClass, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceClass))
	})
	return ret, err
}

// ResourceClasses returns an object that can list and get ResourceClasses.
func (s *resourceClassLister) ResourceClasses(namespace string) ResourceClassNamespaceLister {
	return resourceClassNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceClassNamespaceLister helps list and get ResourceClasses.
type ResourceClassNamespaceLister interface {
	// List lists all ResourceClasses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceClass, err error)
	// Get retrieves the ResourceClass from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ResourceClass, error)
	ResourceClassNamespaceListerExpansion
}

// resourceClassNamespaceLister implements the ResourceClassNamespaceLister
// interface.
type resourceClassNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceClasses in the indexer for a given namespace.
func (s resourceClassNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceClass, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceClass))
	})
	return ret, err
}

// Get retrieves the ResourceClass from the indexer for a given namespace and name.
func (s resourceClassNamespaceLister) Get(name string) (*v1alpha1.ResourceClass, error) {
	// TODO(cph): rewrite here for Cluster scope compatibility
	key := name
	if s.namespace != "" {
		key = s.namespace + "/" + name
	}

	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceclass"), name)
	}
	return obj.(*v1alpha1.ResourceClass), nil
}
